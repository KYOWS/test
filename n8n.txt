services:
  n8n:
    image: n8nio/n8n:1.81.2
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${N8N_URL}`) || Host(`www.${N8N_URL}`)
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.entrypoints=websecure
      - traefik.http.routers.n8n.tls.certresolver=leresolver
      - traefik.http.middlewares.n8n.headers.SSLRedirect=true
      - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
      - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
      - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
      - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
      - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_URL}
      - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.n8n.headers.STSPreload=true
      - traefik.http.routers.n8n.middlewares=n8n@docker
      - traefik.http.services.n8n.loadbalancer.server.port=5678
      - traefik.http.routers.n8n.service=n8n
      - traefik.docker.network=traefik_public
    environment:
      - N8N_HOST=${N8N_URL}
      - N8N_BASE_URL=https://${N8N_URL}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${WEBHOOK_URL}
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n_postgres
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=n8n
      - SSL_EMAIL=${EMAIL}
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=n8n_redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=super_secure_password
      - QUEUE_HEALTH_CHECK_ACTIVE=true
      - N8N_ENCRYPTION_KEY=2cOfCjkpLeKRkUlFuNGZLzodhovDMGpQ
      - NODE_FUNCTION_ALLOW_EXTERNAL=moment,lodash,moment-with-locales
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=336
    # Substituindo bind mounts por volumes nomeados para o n8n:
    volumes:
      - n8n_data:/root/.n8n
      - n8n_files:/files
    deploy:
      mode: replicated #Permite a criação de replicas
      replicas: 1
      placement:
        constraints:
          - node.role == manager #Define a qual node está relacionado
      restart_policy:
        condition: any
    # Em Swarm, depends_on não controla ordem de inicialização
    # depends_on:
      # - n8n_postgres
      # - n8n_redis
    networks:
      - traefik_public
      - n8nWorkers

  n8n-worker-1:
    image: docker.n8n.io/n8nio/n8n
    command: worker
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n_postgres
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=n8n
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=n8n_redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=super_secure_password
      - N8N_ENCRYPTION_KEY=2cOfCjkpLeKRkUlFuNGZLzodhovDMGpQ
    labels:
      - "traefik.enable=false"
    deploy:
      mode: replicated #Permite a criação de replicas
      replicas: 1
      placement:
        constraints:
          - node.role == manager #Define a qual node está relacionado
      restart_policy:
        condition: any
    # depends_on:
      # - n8n_postgres
      # - n8n_redis
    networks:
      - n8nWorkers

  n8n-worker-2:
    image: docker.n8n.io/n8nio/n8n
    command: worker
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n_postgres
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=n8n
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=n8n_redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=super_secure_password
      - N8N_ENCRYPTION_KEY=2cOfCjkpLeKRkUlFuNGZLzodhovDMGpQ
    labels:
      - "traefik.enable=false"
    deploy:
      mode: replicated #Permite a criação de replicas
      replicas: 1
      placement:
        constraints:
          - node.role == manager #Define a qual node está relacionado
      restart_policy:
        condition: any
    # depends_on:
      # - n8n_postgres
      # - n8n_redis
    networks:
      - n8nWorkers

  n8n_postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: n8n
      POSTGRES_DB: n8n
    labels:
      - "traefik.enable=false"
    deploy:
      mode: replicated #Permite a criação de replicas
      replicas: 1
      placement:
        constraints:
          - node.role == manager #Define a qual node está relacionado
      restart_policy:
        condition: any
    volumes:
      - n8n_postgres_data:/var/lib/postgresql/data
    networks:
      - n8nWorkers

  n8n_redis:
    image: redis:6-alpine
    command: redis-server --requirepass "super_secure_password"
    labels:
      - "traefik.enable=false"
    deploy:
      mode: replicated #Permite a criação de replicas
      replicas: 1
      placement:
        constraints:
          - node.role == manager #Define a qual node está relacionado
      restart_policy:
        condition: any
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8nWorkers

volumes:
  n8n_postgres_data:
    name: n8n_postgres_data
  redis_data:
    name: redis_data
  # Volumes adicionais para mapear conteúdo do n8n
  n8n_data:
    driver: local
  n8n_files:
    driver: local

networks:
  traefik_public:
    external: true
  n8nWorkers:
    external: true
